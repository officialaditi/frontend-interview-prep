// interview question for useState:-

1) what is useState in react?
--> useState is an hook that is used to manage the state and allow the function to update the state.

--> it have current state, and updater function named with set.


2)  what will be the output??
 In this example, you might expect that clicking the “+3” button would increment the counter three times because it calls setNumber(number + 1) three times.
 export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(number + 1);
        setNumber(number + 1);
        setNumber(number + 1);
      }}>+3</button>
    </>
  )
}
==>     0 [+3] <- onClicking it increment the number by 1 only
      --> 1, 2, 3, 4.....
      --> Notice that number only increments once per click!

explaination:-

--> Setting state only changes it for the next render.
--> During the first render, number was 0
--> This is why, in that render’s onClick handler, the value of number is still 0 even after setNumber(number + 1) was called:

<button onClick={() => {
  setNumber(number + 1);
  setNumber(number + 1);
  setNumber(number + 1);
}}>+3</button>

3) what is two way data binding and how to achieve it in react??
=>
  Two-way data binding is when changes in the UI (like typing in a text box) immediately update the data in your code, and any updates to that data automatically show up in the UI.

  -> react default using one way data binding means its update the data from parent component to child component,
   but to achieve this in react we use controlled component with state

  controlled component:-

  -->   controlled component in React is an input element (like <input>, <textarea>, or <select>) that is fully controlled by React state.

  --> The component’s value is set by React via a value prop, and any changes to the input are handled by an onChange event that updates the state. 

  --> This way, React has full control over the component’s data, making it predictable and easier to manage.
  
  code:- 

  function MyInput() {
  const [text, setText] = useState("");

  return (
    <input
      value={text}
      onChange={(e) => setText(e.target.value)}
    />
  );
}


4) Build the form with the field firstname, lastname, and email, use only one state to manage all field
==> to this we have added all the field in the useState as object (managing single state) and inside that object give the key value pair as firstname: '', lastname: '', email: ''

==> after this we have make the input field and it imp to make the input field [name] same as the object we are passing inside the useState initial

==> this code:-
 const handleChange = (e) => {
    const { name, value } = e.target;
    setUserData({ ...useData, [name]: value });
  };
  it taking the value from the input and and setting it to setUserData() we are spreading the first all userData and then taking the name and value data and all are this store inside the object 

  ==> the name will be the input name example:= name = 'firstname' so in output it will also be firstname and the value is the value we type inside the input
  example:- input :- name = firstname,
            typing [  aditi  ]
        
  output:- firstname: aditi

  // better understanding write the code.
